type
  TokenKind* = enum
    # Terminal
    CONST
    UNARY
    BINARY
    INFIX
    LEFTBRACKET
    RIGHTBRACKET
    SPACE
    DEFINITION
    LEFTRIGHT
    TEXT
    BIG
    LONG
    STRETCHY
    MATRIX
    END

  AMToken* = tuple
    symbol: string
    tex: string
    tkKind: TokenKind

const AMTokens* = [
  # some greek symbols
  (symbol:"alpha", tex:r"\alpha", tkKind:CONST),
  (symbol:"beta", tex:r"\beta", tkKind:CONST),
  (symbol:"chi", tex:r"\chi", tkKind:CONST),
  (symbol:"delta", tex:r"\delta", tkKind:CONST),
  (symbol:"Delta", tex:r"\Delta", tkKind:CONST),
  (symbol:"epsi", tex:r"\epsi", tkKind:CONST),
  (symbol:"varepsilon", tex:r"\varepsilon", tkKind:CONST),
  (symbol:"eta", tex:r"\eta", tkKind:CONST),
  (symbol:"gamma", tex:r"\gamma", tkKind:CONST),
  (symbol:"Gamma", tex:r"\Gamma", tkKind:CONST),
  (symbol:"iota", tex:r"\iota", tkKind:CONST),
  (symbol:"kappa", tex:r"\kappa", tkKind:CONST),
  (symbol:"lambda", tex:r"\lambda", tkKind:CONST),
  (symbol:"Lambda", tex:r"\Lambda", tkKind:CONST),
  (symbol:"lamda", tex:r"\lamda", tkKind:CONST),
  (symbol:"Lamda", tex:r"\Lamda", tkKind:CONST),
  (symbol:"mu", tex:r"\mu", tkKind:CONST),
  (symbol:"nu", tex:r"\nu", tkKind:CONST),
  (symbol:"omega", tex:r"\omega", tkKind:CONST),
  (symbol:"Omega", tex:r"\Omega", tkKind:CONST),
  (symbol:"phi", tex:r"\phi", tkKind:CONST),
  (symbol:"varphi", tex:r"\varphi", tkKind:CONST),
  (symbol:"Phi", tex:r"\Phi", tkKind:CONST),
  (symbol:"pi", tex:r"\pi", tkKind:CONST),
  (symbol:"Pi", tex:r"\Pi", tkKind:CONST),
  (symbol:"psi", tex:r"\psi", tkKind:CONST),
  (symbol:"Psi", tex:r"\Psi", tkKind:CONST),
  (symbol:"rho", tex:r"\rho", tkKind:CONST),
  (symbol:"sigma", tex:r"\sigma", tkKind:CONST),
  (symbol:"Sigma", tex:r"\Sigma", tkKind:CONST),
  (symbol:"tau", tex:r"\tau", tkKind:CONST),
  (symbol:"theta", tex:r"\theta", tkKind:CONST),
  (symbol:"vartheta", tex:r"\vartheta", tkKind:CONST),
  (symbol:"Theta", tex:r"\Theta", tkKind:CONST),
  (symbol:"upsilon", tex:r"\upsilon", tkKind:CONST),
  (symbol:"xi", tex:r"\xi", tkKind:CONST),
  (symbol:"Xi", tex:r"\Xi", tkKind:CONST),
  (symbol:"zeta", tex:r"\zeta", tkKind:CONST),

  # binary operation symbols
  (symbol:"*", tex:r"\cdot", tkKind:CONST),
  (symbol:"**", tex:r"\ast", tkKind:CONST),
  (symbol:"***", tex:r"\star", tkKind:CONST),
  (symbol:"//", tex:r"/", tkKind:CONST),
  (symbol:"\\\\", tex:r"\\",   tkKind:CONST),
  (symbol:"setminus", tex:r"\\", tkKind:CONST),
  (symbol:"xx", tex:r"\times", tkKind:CONST),
  (symbol:"|><", tex:r"\ltimes", tkKind:CONST),
  (symbol:"><|", tex:r"\rtimes", tkKind:CONST),
  (symbol:"|><|", tex:r"\bowtie", tkKind:CONST),
  (symbol:"-:", tex:r"\div", tkKind:CONST),
  (symbol:"divide", tex:r"-:", tkKind:DEFINITION),
  (symbol:"@", tex:r"\circ", tkKind:CONST),
  (symbol:"o+", tex:r"\oplus", tkKind:CONST),
  (symbol:"ox", tex:r"\otimes", tkKind:CONST),
  (symbol:"o.", tex:r"\odot", tkKind:CONST),
  (symbol:"sum", tex:r"\sum", tkKind:CONST),
  (symbol:"prod", tex:r"\prod", tkKind:CONST),
  (symbol:"^^", tex:r"\wedge", tkKind:CONST),
  (symbol:"^^^", tex:r"\bigwedge", tkKind:CONST),
  (symbol:"vv", tex:r"\vee", tkKind:CONST),
  (symbol:"vvv", tex:r"\bigvee", tkKind:CONST),
  (symbol:"nn", tex:r"\cap", tkKind:CONST),
  (symbol:"nnn", tex:r"\bigcap", tkKind:CONST),
  (symbol:"uu", tex:r"\cup", tkKind:CONST),
  (symbol:"uuu", tex:r"\bigcup", tkKind:CONST),

  # binary relation symbols
  (symbol:"!=", tex:r"\ne", tkKind:CONST),
  (symbol:":=", tex:r":=", tkKind:CONST),
  (symbol:"lt", tex:r"<", tkKind:CONST),
  (symbol:"<=", tex:r"\le", tkKind:CONST),
  (symbol:"lt=", tex:r"\leq", tkKind:CONST),
  (symbol:"gt", tex:r">", tkKind:CONST),
  (symbol:">=", tex:r"\ge", tkKind:CONST),
  (symbol:"gt=", tex:r"\geq", tkKind:CONST),
  (symbol:"-<", tex:r"\prec", tkKind:CONST),
  (symbol:"-lt", tex:r"\prec", tkKind:CONST),
  (symbol:">-", tex:r"\succ", tkKind:CONST),
  (symbol:"-<=", tex:r"\preceq", tkKind:CONST),
  (symbol:">-=", tex:r"\succeq", tkKind:CONST),
  (symbol:"in", tex:r"\in", tkKind:CONST),
  (symbol:"!in", tex:r"\notin", tkKind:CONST),
  (symbol:"sub", tex:r"\subset", tkKind:CONST),
  (symbol:"sup", tex:r"\supset", tkKind:CONST),
  (symbol:"sube", tex:r"\subseteq", tkKind:CONST),
  (symbol:"supe", tex:r"\supseteq", tkKind:CONST),
  (symbol:"-=", tex:r"\equiv", tkKind:CONST),
  (symbol:"~=", tex:r"\cong", tkKind:CONST),
  (symbol:"~~", tex:r"\approx", tkKind:CONST),
  (symbol:"prop", tex:r"\propto", tkKind:CONST),

  #logical symbols
  (symbol:"and", tex:r"and", tkKind:SPACE),
  (symbol:"or", tex:r"or", tkKind:SPACE),
  (symbol:"not", tex:r"\neg", tkKind:CONST),
  (symbol:"=>", tex:r"\implies", tkKind:CONST),
  (symbol:"if", tex:r"if", tkKind:SPACE),
  (symbol:"<=>", tex:r"\iff", tkKind:CONST),
  (symbol:"AA", tex:r"\forall", tkKind:CONST),
  (symbol:"EE", tex:r"\exists", tkKind:CONST),
  (symbol:"_|_", tex:r"\bot", tkKind:CONST),
  (symbol:"TT", tex:r"\top", tkKind:CONST),
  (symbol:"|--", tex:r"\vdash", tkKind:CONST),
  (symbol:"|==", tex:r"\models", tkKind:CONST),

  #grouping brackets
  (symbol:"(", tex:r"\left(", tkKind:LEFTBRACKET),
  (symbol:")", tex:r"\right)", tkKind:RIGHTBRACKET),
  (symbol:"[", tex:r"\left[", tkKind:LEFTBRACKET),
  (symbol:"]", tex:r"\right]", tkKind:RIGHTBRACKET),
  (symbol:"{", tex:r"\left\{", tkKind:LEFTBRACKET),
  (symbol:"}", tex:r"\right\}", tkKind:RIGHTBRACKET),
  (symbol:"|", tex:r"|", tkKind:LEFTRIGHT),
  (symbol:":|:", tex:r"|", tkKind:CONST),
  (symbol:"|:", tex:r"\left|", tkKind:LEFTBRACKET),
  (symbol:":|", tex:r"\right|", tkKind:RIGHTBRACKET),
  (symbol:"(:", tex:r"\langle", tkKind:LEFTBRACKET),
  (symbol:":)", tex:r"\rangle", tkKind:RIGHTBRACKET),
  (symbol:"<<", tex:r"\langle", tkKind:LEFTBRACKET),
  (symbol:">>", tex:r"\rangle", tkKind:RIGHTBRACKET),
  (symbol:"{:", tex:r"\left.", tkKind:LEFTBRACKET),
  (symbol:":}", tex:r"\right.", tkKind:RIGHTBRACKET),

  #miscellaneous symbols
  (symbol:"int", tex:r"\int", tkKind:CONST),
  # (symbol:"dx", tex:r"{:d x:}", tkKind:DEFINITION),
  # (symbol:"dy", tex:r"{:d y:}", tkKind:DEFINITION),
  # (symbol:"dz", tex:r"{:d z:}", tkKind:DEFINITION),
  # (symbol:"dt", tex:r"{:d t:}", tkKind:DEFINITION),
  (symbol:"oint", tex:r"\oint", tkKind:CONST),
  (symbol:"del", tex:r"\partial", tkKind:CONST),
  (symbol:"grad", tex:r"\nabla", tkKind:CONST),
  (symbol:"+-", tex:r"\pm", tkKind:CONST),
  (symbol:"O/", tex:r"\emptyset", tkKind:CONST),
  (symbol:"oo", tex:r"\infty", tkKind:CONST),
  (symbol:"aleph", tex:r"\aleph", tkKind:CONST),
  (symbol:"...", tex:r"\ldots", tkKind:CONST),
  (symbol:":.", tex:r"\therefore", tkKind:CONST),
  (symbol:":'", tex:r"\because", tkKind:CONST),
  (symbol:"/_", tex:r"\angle", tkKind:CONST),
  (symbol:"/_\\", tex:r"\triangle", tkKind:CONST),
  (symbol:"'", tex:r"\prime", tkKind:CONST),
  (symbol:"tilde", tex:r"\tilde", tkKind:UNARY),
  (symbol:"\\ ", tex:r"\backslash", tkKind:CONST),
  (symbol:"frown", tex:r"\frown", tkKind:CONST),
  (symbol:"quad", tex:r"\quad", tkKind:CONST),
  (symbol:"qquad", tex:r"\qquad", tkKind:CONST),
  (symbol:"cdots", tex:r"\cdots", tkKind:CONST),
  (symbol:"vdots", tex:r"\vdots", tkKind:CONST),
  (symbol:"ddots", tex:r"\ddots", tkKind:CONST),
  (symbol:"diamond", tex:r"\diamond", tkKind:CONST),
  (symbol:"square", tex:r"\Box", tkKind:CONST),
  (symbol:"|__", tex:r"\lfloor", tkKind:CONST),
  (symbol:"__|", tex:r"\rfloor", tkKind:CONST),
  (symbol:"|~", tex:r"\lceilingng", tkKind:CONST),
  (symbol:"~|", tex:r"\rceiling", tkKind:CONST),
  (symbol:"CC", tex:r"\mathbb{C}", tkKind:CONST),
  (symbol:"NN", tex:r"\mathbb{N}", tkKind:CONST),
  (symbol:"QQ", tex:r"\mathbb{Q}", tkKind:CONST),
  (symbol:"RR", tex:r"\mathbb{R}", tkKind:CONST),
  (symbol:"ZZ", tex:r"\mathbb{Z}", tkKind:CONST),

  #standard functions
  (symbol:"lim", tex:r"lim", tkKind:CONST),
  (symbol:"Lim", tex:r"Lim", tkKind:CONST),
  (symbol:"sin", tex:r"sin", tkKind:UNARY),
  (symbol:"cos", tex:r"cos", tkKind:UNARY),
  (symbol:"tan", tex:r"tan", tkKind:UNARY),
  (symbol:"sinh", tex:r"sinh", tkKind:UNARY),
  (symbol:"cosh", tex:r"cosh", tkKind:UNARY),
  (symbol:"tanh", tex:r"tanh", tkKind:UNARY),
  (symbol:"cot", tex:r"cot", tkKind:UNARY),
  (symbol:"sec", tex:r"sec", tkKind:UNARY),
  (symbol:"csc", tex:r"csc", tkKind:UNARY),
  (symbol:"arcsin", tex:r"arcsin", tkKind:UNARY),
  (symbol:"arccos", tex:r"arccos", tkKind:UNARY),
  (symbol:"arctan", tex:r"arctan", tkKind:UNARY),
  (symbol:"coth", tex:r"coth", tkKind:UNARY),
  (symbol:"sech", tex:r"sech", tkKind:UNARY),
  (symbol:"csch", tex:r"csch", tkKind:UNARY),
  (symbol:"exp", tex:r"exp", tkKind:UNARY),
  # (symbol:"abs", tex:r"abs", tkKind:UNARY, rewriteleftright:["|","|"]), # TODO needs extra attention
  # (symbol:"norm", tex:r"norm", tkKind:UNARY, rewriteleftright:["\u2225","\u2225"]),
  # (symbol:"floor", tex:r"floor", tkKind:UNARY, rewriteleftright:["\u230A","\u230B"]),
  # (symbol:"ceil", tex:r"ceil", tkKind:UNARY, rewriteleftright:["\u2308","\u2309"]),
  (symbol:"log", tex:r"log", tkKind:UNARY),
  (symbol:"ln", tex:r"ln", tkKind:UNARY),
  (symbol:"det", tex:r"det", tkKind:UNARY),
  (symbol:"dim", tex:r"dim", tkKind:CONST),
  (symbol:"mod", tex:r"mod", tkKind:CONST),
  (symbol:"gcd", tex:r"gcd", tkKind:UNARY),
  (symbol:"lcm", tex:r"lcm", tkKind:UNARY),
  (symbol:"lub", tex:r"lub", tkKind:CONST),
  (symbol:"glb", tex:r"glb", tkKind:CONST),
  (symbol:"min", tex:r"min", tkKind:CONST),
  (symbol:"max", tex:r"max", tkKind:CONST),
  (symbol:"Sin", tex:r"Sin", tkKind:UNARY),
  (symbol:"Cos", tex:r"Cos", tkKind:UNARY),
  (symbol:"Tan", tex:r"Tan", tkKind:UNARY),
  (symbol:"Arcsin", tex:r"Arcsin", tkKind:UNARY),
  (symbol:"Arccos", tex:r"Arccos", tkKind:UNARY),
  (symbol:"Arctan", tex:r"Arctan", tkKind:UNARY),
  (symbol:"Sinh", tex:r"Sinh", tkKind:UNARY),
  (symbol:"Cosh", tex:r"Cosh", tkKind:UNARY),
  (symbol:"Tanh", tex:r"Tanh", tkKind:UNARY),
  (symbol:"Cot", tex:r"Cot", tkKind:UNARY),
  (symbol:"Sec", tex:r"Sec", tkKind:UNARY),
  (symbol:"Csc", tex:r"Csc", tkKind:UNARY),
  (symbol:"Log", tex:r"Log", tkKind:UNARY),
  (symbol:"Ln", tex:r"Ln", tkKind:UNARY),
  # (symbol:"Abs", tex:r"abs", tkKind:UNARY, notexcopy:true, rewriteleftright:["|","|"]), # TODO needs attention

  #arrows
  (symbol:"uarr", tex:r"\uparrow", tkKind:CONST),
  (symbol:"darr", tex:r"\downarrow", tkKind:CONST),
  (symbol:"rarr", tex:r"\rightarrow", tkKind:CONST),
  (symbol:"->", tex:r"\to", tkKind:CONST),
  (symbol:">->", tex:r"\rightarrowtail", tkKind:CONST),
  (symbol:"->>", tex:r"\twoheadrightarrow", tkKind:CONST),
  (symbol:">->>", tex:r"\twoheadrightarrowtail", tkKind:CONST),
  (symbol:"|->", tex:r"\mapsto", tkKind:CONST),
  (symbol:"larr", tex:r"\leftarrow", tkKind:CONST),
  (symbol:"harr", tex:r"\leftrightarrow", tkKind:CONST),
  (symbol:"rArr", tex:r"\Rightarrow", tkKind:CONST),
  (symbol:"lArr", tex:r"\Leftarrow", tkKind:CONST),
  (symbol:"hArr", tex:r"\Leftrightarrow", tkKind:CONST),

  #commands with argument
  (symbol:"sqrt", tex:r"\sqrt", tkKind:UNARY),
  (symbol:"root", tex:r"\sqrt", tkKind:BINARY), # TODO special case: \sqrt[n]{...}
  (symbol:"frac", tex:r"\frac", tkKind:BINARY),
  (symbol:"/", tex:r"/", tkKind:INFIX),
  (symbol:"stackrel", tex:r"\stackrel", tkKind:BINARY),
  (symbol:"overset", tex:r"\overset", tkKind:BINARY),
  (symbol:"underset", tex:r"\underset", tkKind:BINARY),
  (symbol:"_",  tex:r"_", tkKind:INFIX),
  (symbol:"^",  tex:r"^", tkKind:INFIX),
  (symbol:"hat", tex:r"\hat", tkKind:UNARY),
  (symbol:"bar", tex:r"\bar", tkKind:UNARY),
  (symbol:"vec", tex:r"\vec", tkKind:UNARY),
  (symbol:"dot", tex:r"\dot", tkKind:UNARY),
  (symbol:"ddot", tex:r"\ddot", tkKind:UNARY),
  (symbol:"ul", tex:r"\underline", tkKind:UNARY),
  (symbol:"ubrace", tex:r"\underbrace", tkKind:UNARY),
  (symbol:"obrace", tex:r"\overbrace", tkKind:UNARY),
  (symbol:"text", tex:r"text", tkKind:TEXT),
  (symbol:"mbox", tex:r"mbox", tkKind:TEXT),
  (symbol:"color", tex:r"color", tkKind:BINARY),
  (symbol:"cancel", tex:r"\not", tkKind:UNARY),
  # (symbol:"\"", tex:r"mbox", tkKind:TEXT),
  (symbol:"bb", tex:r"\mathbf", tkKind:UNARY),
  (symbol:"mathbf", tex:r"\mathbf", tkKind:UNARY),
  (symbol:"sf", tex:r"\mathsf", tkKind:UNARY),
  (symbol:"mathsf", tex:r"\mathsf", tkKind:UNARY),
  (symbol:"bbb", tex:r"\mathbb", tkKind:UNARY),
  (symbol:"mathbb", tex:r"\mathbb", tkKind:UNARY),
  (symbol:"cc", tex:r"\mathscr", tkKind:UNARY),
  (symbol:"mathcal", tex:r"\mathscr", tkKind:UNARY),
  (symbol:"tt", tex:r"\mathtt", tkKind:UNARY),
  (symbol:"mathtt", tex:r"\mathtt", tkKind:UNARY),
  (symbol:"fr", tex:r"\mathfrak", tkKind:UNARY),
  (symbol:"mathfrak", tex:r"\mathfrak", tkKind:UNARY)
]

proc `==`*(a, b: AMToken): bool {.inline.} =
  a.tkKind == b.tkKind and a.symbol == b.symbol
proc `==`*(token: AMToken, kind: TokenKind): bool {.inline.} = token.tkKind == kind

converter toToken*(str: string): AMToken =
  for token in AMTokens:
    if token.symbol == str:
      result = token
      break
